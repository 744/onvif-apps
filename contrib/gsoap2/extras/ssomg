#!/usr/bin/perl
use strict;
use Getopt::Long;

print "===========================================================
gSOAP server side operation method(wrapper) generator, v1.0
Webpage: https://github.com/varphone/onvif-apps
Contact: varphone wong, varphone\@qq.com
===========================================================

";

my $extension= ".c";
my @files = ();
my $help = 0;
my @includes = ();
my @includes_sys = ();
my $outdir = ".";
my $retval = "SOAP_NO_METHOD";
my $suffix = "-SSOM";

GetOptions(
  'extension=s' => \$extension,
  'file=s' => \@files,
  'help=i' => \$help,
  'include=s' => \@includes,
  'include-local=s' => \@includes,
  'include-sys=s' => \@includes_sys,
  'outdir=s' => \$outdir,
  'retval=s' => \$retval,
  'suffix=s' => \$suffix,
);

sub showHelp() {
  print "Usage: ssomg --options
Options:
  --extension [.c]          Setting code source file extension.
  --file                    Add StubHeader file to processing list.
  --help                    Show help message.
  --include                 Add include header.
  --inclde-local            Add include header(local path).
  --include-sys             Add include header(system path).
  --outdir [.]              Setup output directory.
  --retval [SOAP_NO_MTHOD]  Setup default return value.
  --suffix [SSOM]           Setup source file suffix.
Examples:
  ssomg --file=soapStub.h --include=soapH.h
  ssomg --file soapStub.h --include soapH.h --suffix=-myssom
        --extension=.cpp --outdir out --retval SOAP_ERROR
";
}

sub probeNamespaces($$@) {
  my @result = ();
  my $srcFile = shift;
  my $lines = shift;
  foreach my $line (@$lines) {
    if ($line =~ m/SOAP_NAMESPACE_OF_/) {
      chop($line);
      $line =~ s/^(.*)\s+SOAP_NAMESPACE_OF_([^\s]*)\s+.*$/$2/;
      push(@result, $line);
      print "Namespace: $line probed.\n";
    }
  }
  return @result;
}

sub printHeader($) {
  my $parser = shift;
  print {$parser->{fd}} "/* $parser->{ns}${suffix}${extension}
   Generated by gSOAP server side operations method wrapper generator v1.0 from $parser->{srcFile}

Copyright(C) 2012, Varphone Wong, No.55 DP. CETC Group. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

";
  foreach my $i (@includes_sys) {
    print {$parser->{fd}} "#include <$i>\n";
  }
  foreach my $i (@includes) {
    print {$parser->{fd}} "#include \"$i\"\n";
  }
  print {$parser->{fd}} "\n";
}

sub printFooter($) {
}

sub printWrapperFunction($) {
  my $parser = shift;
  print {$parser->{fd}} "$parser->{proto}
{
  //TODO: Place your code here.
  return ${retval};
}

";
}

sub generateOperationsForNS($) {
  my $parser = shift;
  $parser->{dstFile} = "$outdir/$parser->{ns}${suffix}${extension}";
  open $parser->{fd}, ">$parser->{dstFile}" or die "Unable to open: $parser->{dstFile}\n";
  print "Generating $parser->{dstFile} for $parser->{ns}.\n";
  printHeader $parser;
  foreach my $line (@{$parser->{lines}}) {
    if ($line =~ m/^SOAP_FMAC5 int SOAP_FMAC6 __$parser->{ns}__/) {
      $line =~ s/;\s*$//;
      $parser->{proto} = $line;
      printWrapperFunction $parser;
    }
  }
  printFooter $parser;
  close $parser->{fd};
}

sub parseFile($) {
  open(FD, $_[0]) or die("Unable to open: $_[0]\n");
  my @lines = <FD>;
  close(FD);
  my @nss = probeNamespaces $_[0], \@lines;
  foreach my $ns (@nss) {
    my %parser = ("srcFile" => $_[0],
      "lines" => \@lines,
      "ns" => $ns,
    );
    generateOperationsForNS \%parser;
  }
}

if ($help or not scalar(@files)) { showHelp() and exit; }

foreach my $file (@files) {
  print "Parsing file: $file.\n";
  parseFile($file);
}

